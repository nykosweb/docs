Руководство по основам ООП (Объектно-Ориентированного Программирования) на примерах популярных языков программирования

Объектно-Ориентированное Программирование (ООП) является парадигмой программирования, основанной на использовании объектов, которые комбинируют данные и методы. Основные принципы ООП включают в себя инкапсуляцию, наследование, полиморфизм и абстракцию. Давайте рассмотрим каждый из этих принципов на примерах с использованием различных языков программирования: C++, C#, Java, JavaScript, Python, Ruby, Dart, Golang и Node.js.  

1. Инкапсуляция

Инкапсуляция — это механизм, позволяющий скрыть внутреннюю реализацию класса и предоставить доступ к данным только через методы этого класса.

C++

#include 
using namespace std;

class BankAccount {
private: // закрытые поля
    double balance;
public: // публичные методы
    BankAccount() : balance(0) {}
    
    void Deposit(double amount) {
        balance += amount;
    }
    
    double GetBalance() {
        return balance;
    }
};

int main() {
    BankAccount account;
    account.Deposit(100);
    cout &lt;&lt; "Balance: " &lt;&lt; account.GetBalance() &lt;&lt; endl; // Balance: 100
    return 0;
}


C#

using System;

class BankAccount {
    private double balance;

    public BankAccount() {
        balance = 0;
    }

    public void Deposit(double amount) {
        balance += amount;
    }

    public double GetBalance() {
        return balance;
    }
}

class Program {
    static void Main() {
        BankAccount account = new BankAccount();
        account.Deposit(100);
        Console.WriteLine("Balance: " + account.GetBalance()); // Balance: 100
    }
}


Java

class BankAccount {
    private double balance;

    public BankAccount() {
        balance = 0;
    }

    public void deposit(double amount) {
        balance += amount;
    }

    public double getBalance() {
        return balance;
    }
}

public class Main {
    public static void main(String[] args) {
        BankAccount account = new BankAccount();
        account.deposit(100);
        System.out.println("Balance: " + account.getBalance()); // Balance: 100
    }
}


JavaScript (с использованием ES6 классов)

class BankAccount {
    #balance; // Закрытое поле

    constructor() {
        this.#balance = 0;
    }

    deposit(amount) {
        this.#balance += amount;
    }

    getBalance() {
        return this.#balance;
    }
}

const account = new BankAccount();
account.deposit(100);
console.log(`Balance: ${account.getBalance()}`); // Balance: 100


Python

class BankAccount:
    def __init__(self):
        self.__balance = 0  # Закрытое поле

    def deposit(self, amount):
        self.__balance += amount

    def get_balance(self):
        return self.__balance

account = BankAccount()
account.deposit(100)
print(f"Balance: {account.get_balance()}")  # Balance: 100


Ruby

class BankAccount
  def initialize
    @balance = 0 # Закрытое поле
  end

  def deposit(amount)
    @balance += amount
  end

  def get_balance
    @balance
  end
end

account = BankAccount.new
account.deposit(100)
puts "Balance: #{account.get_balance}"  # Balance: 100


Dart

class BankAccount {
  double _balance = 0; // Закрытое поле

  void deposit(double amount) {
    _balance += amount;
  }

  double get balance =&gt; _balance; // Геттер
}

void main() {
  var account = BankAccount();
  account.deposit(100);
  print('Balance: ${account.balance}'); // Balance: 100
}


Golang (структуры и методы)

package main

import "fmt"

type BankAccount struct {
    balance float64 // Открытое поле
}

func (b *BankAccount) Deposit(amount float64) {
    b.balance += amount
}

func (b BankAccount) GetBalance() float64 {
    return b.balance
}

func main() {
    account := BankAccount{}
    account.Deposit(100)
    fmt.Println("Balance:", account.GetBalance()) // Balance: 100
}


Node.js (JavaScript на сервере)

class BankAccount {
    #balance; // Закрытое поле

    constructor() {
        this.#balance = 0;
    }

    deposit(amount) {
        this.#balance += amount;
    }

    getBalance() {
        return this.#balance;
    }
}

const account = new BankAccount();
account.deposit(100);
console.log(`Balance: ${account.getBalance()}`); // Balance: 100


2. Наследование

Наследование позволяет создавать новый класс на основе существующего, наследуя его свойства и методы.

C++

#include 
using namespace std;

class Account {
protected:
    double balance;
public:
    Account() : balance(0) {}
    void Deposit(double amount) {
        balance += amount;
    }
};

class SavingsAccount : public Account {
public:
    double GetBalance() {
        return balance;
    }
};

int main() {
    SavingsAccount account;
    account.Deposit(100);
    cout &lt;&lt; "Savings Account Balance: " &lt;&lt; account.GetBalance() &lt;&lt; endl; // 100
    return 0;
}


C#

using System;

class Account {
    protected double balance;

    public Account() {
        balance = 0;
    }

    public void Deposit(double amount) {
        balance += amount;
    }
}

class SavingsAccount : Account {
    public double GetBalance() {
        return balance;
    }
}

class Program {
    static void Main() {
        SavingsAccount account = new SavingsAccount();
        account.Deposit(100);
        Console.WriteLine("Savings Account Balance: " + account.GetBalance()); // 100
    }
}


Java

class Account {
    protected double balance;

    public Account() {
        balance = 0;
    }

    public void deposit(double amount) {
        balance += amount;
    }
}

class SavingsAccount extends Account {
    public double getBalance() {
        return balance;
    }
}

public class Main {
    public static void main(String[] args) {
        SavingsAccount account = new SavingsAccount();
        account.deposit(100);
        System.out.println("Savings Account Balance: " + account.getBalance()); // 100
    }
}


JavaScript (выражение с использованием ES6 классов)

class Account {
    constructor() {
        this.balance = 0;
    }

    deposit(amount) {
        this.balance += amount;
    }
}

class SavingsAccount extends Account {
    getBalance() {
        return this.balance;
    }
}

const account = new SavingsAccount();
account.deposit(100);
console.log(`Savings Account Balance: ${account.getBalance()}`); // 100


Python

class Account:
    def __init__(self):
        self.balance = 0  # Открытое поле

    def deposit(self, amount):
        self.balance += amount

class SavingsAccount(Account):
    def get_balance(self):
        return self.balance

account = SavingsAccount()
account.deposit(100)
print(f"Savings Account Balance: {account.get_balance()}")  # 100


Ruby

class Account
  def initialize
    @balance = 0 # Закрытое поле
  end

  def deposit(amount)
    @balance += amount
  end
end

class SavingsAccount &lt; Account
  def get_balance
    @balance
  end
end

account = SavingsAccount.new
account.deposit(100)
puts "Savings Account Balance: #{account.get_balance}"  # 100


Dart

class Account {
  double balance = 0; // Открытое поле

  void deposit(double amount) {
    balance += amount;
  }
}

class SavingsAccount extends Account {
  double getBalance() {
    return balance;
  }
}

void main() {
  var account = SavingsAccount();
  account.deposit(100);
  print('Savings Account Balance: ${account.getBalance()}'); // 100
}


Golang (Го не поддерживает наследование, но поддерживает композиций)

package main

import "fmt"

type Account struct {
    balance float64 // Открытое поле
}

func (a *Account) Deposit(amount float64) {
    a.balance += amount
}

type SavingsAccount struct {
    Account // Встраивание
}

func (s SavingsAccount) GetBalance() float64 {
    return s.balance
}

func main() {
    account := SavingsAccount{}
    account.Deposit(100)
    fmt.Println("Savings Account Balance:", account.GetBalance()) // 100
}


Node.js (JavaScript на сервере)

class Account {
    constructor() {
        this.balance = 0;
    }

    deposit(amount) {
        this.balance += amount;
    }
}

class SavingsAccount extends Account {
    getBalance() {
        return this.balance;
    }
}

const account = new SavingsAccount();
account.deposit(100);
console.log(`Savings Account Balance: ${account.getBalance()}`); // 100


3. Полиморфизм

Полиморфизм — это возможность использовать один интерфейс для разных типов. Он достигается через переопределение методов в наследуемых классах.

C++

#include 
using namespace std;

class Shape {
public:
    virtual void Draw() {
        cout &lt;&lt; "Drawing a shape." &lt;&lt; endl;
    }
};

class Circle : public Shape {
public:
    void Draw() override {
        cout &lt;&lt; "Drawing a circle." &lt;&lt; endl;
    }
};

void DrawShape(Shape* shape) {
    shape-&gt;Draw();
}

int main() {
    Shape shape;
    Circle circle;
    DrawShape(&amp;shape);  // Drawing a shape.
    DrawShape(&amp;circle); // Drawing a circle.
    return 0;
}


C#

using System;

class Shape {
    public virtual void Draw() {
        Console.WriteLine("Drawing a shape.");
    }
}

class Circle : Shape {
    public override void Draw() {
        Console.WriteLine("Drawing a circle.");
    }
}

class Program {
    static void DrawShape(Shape shape) {
        shape.Draw();
    }

    static void Main() {
        Shape shape = new Shape();
        Circle circle = new Circle();
        DrawShape(shape);  // Drawing a shape.
        DrawShape(circle); // Drawing a circle.
    }
}


Java

class Shape {
    public void draw() {
        System.out.println("Drawing a shape.");
    }
}

class Circle extends Shape {
    public void draw() {
        System.out.println("Drawing a circle.");
    }
}

public class Main {
    public static void drawShape(Shape shape) {
        shape.draw();
    }

    public static void main(String[] args) {
        Shape shape = new Shape();
        Circle circle = new Circle();
        drawShape(shape);  // Drawing a shape.
        drawShape(circle); // Drawing a circle.
    }
}


JavaScript

class Shape {
    draw() {
        console.log("Drawing a shape.");
    }
}

class Circle extends Shape {
    draw() {
        console.log("Drawing a circle.");
    }
}

function drawShape(shape) {
    shape.draw();
}

const shape = new Shape();
const circle = new Circle();
drawShape(shape);  // Drawing a shape.
drawShape(circle); // Drawing a circle.


Python

class Shape:
    def draw(self):
        print("Drawing a shape.")

class Circle(Shape):
    def draw(self):
        print("Drawing a circle.")

def draw_shape(shape):
    shape.draw()

shape = Shape()
circle = Circle()
draw_shape(shape)  # Drawing a shape.
draw_shape(circle) # Drawing a circle.


Ruby

class Shape
  def draw
    puts "Drawing a shape."
  end
end

class Circle &lt; Shape
  def draw
    puts "Drawing a circle."
  end
end

def draw_shape(shape)
  shape.draw
end

shape = Shape.new
circle = Circle.new
draw_shape(shape)  # Drawing a shape.
draw_shape(circle) # Drawing a circle.


Dart

class Shape {
  void draw() {
    print("Drawing a shape.");
  }
}

class Circle extends Shape {
  @override
  void draw() {
    print("Drawing a circle.");
  }
}

void drawShape(Shape shape) {
  shape.draw();
}

void main() {
  var shape = Shape();
  var circle = Circle();
  drawShape(shape);  // Drawing a shape.
  drawShape(circle); // Drawing a circle.
}


Golang

package main

import "fmt"

type Shape interface {
    Draw()
}

type Circle struct{}

func (c Circle) Draw() {
    fmt.Println("Drawing a circle.")
}

type GenericShape struct{}

func (g GenericShape) Draw() {
    fmt.Println("Drawing a shape.")
}

func drawShape(shape Shape) {
    shape.Draw()
}

func main() {
    shape := GenericShape{}
    circle := Circle{}
    drawShape(shape)  // Drawing a shape.
    drawShape(circle) // Drawing a circle.
}


Node.js

class Shape {
    draw() {
        console.log("Drawing a shape.");
    }
}

class Circle extends Shape {
    draw() {
        console.log("Drawing a circle.");
    }
}

function drawShape(shape) {
    shape.draw();
}

const shape = new Shape();
const circle = new Circle();
drawShape(shape);  // Drawing a shape.
drawShape(circle); // Drawing a circle.


4. Абстракция

Абстракция позволяет сосредоточиться на главных характеристиках объекта, скрывая несущественные детали.

C++

#include 
using namespace std;

class AbstractShape {
public:
    virtual void Draw() = 0; // Чисто виртуальный метод
};

class Circle : public AbstractShape {
public:
    void Draw() override {
        cout &lt;&lt; "Drawing a circle." &lt;&lt; endl;
    }
};

int main() {
    Circle circle;
    circle.Draw(); // Drawing a circle.
    return 0;
}


C#

using System;

abstract class AbstractShape {
    public abstract void Draw(); // Абстрактный метод
}

class Circle : AbstractShape {
    public override void Draw() {
        Console.WriteLine("Drawing a circle.");
    }
}

class Program {
    static void Main() {
        Circle circle = new Circle();
        circle.Draw(); // Drawing a circle.
    }
}


Java

abstract class AbstractShape {
    public abstract void draw(); // Абстрактный метод
}

class Circle extends AbstractShape {
    public void draw() {
        System.out.println("Drawing a circle.");
    }
}

public class Main {
    public static void main(String[] args) {
        Circle circle = new Circle();
        circle.draw(); // Drawing a circle.
    }
}


JavaScript

class AbstractShape {
    draw() {
        throw new Error("Abstract method!");
    }
}

class Circle extends AbstractShape {
    draw() {
        console.log("Drawing a circle.");
    }
}

const circle = new Circle();
circle.draw(); // Drawing a circle.


Python

from abc import ABC, abstractmethod

class AbstractShape(ABC):
    @abstractmethod
    def draw(self):
        pass  # Абстрактный метод

class Circle(AbstractShape):
    def draw(self):
        print("Drawing a circle.")

circle = Circle()
circle.draw()  # Drawing a circle.


Ruby

class AbstractShape
  def draw
    raise NotImplementedError, "This is an abstract method."
  end
end

class Circle &lt; AbstractShape
  def draw
    puts "Drawing a circle."
  end
end

circle = Circle.new
circle.draw  # Drawing a circle.


Dart

abstract class AbstractShape {
  void draw(); // Абстрактный метод
}

class Circle extends AbstractShape {
  @override
  void draw() {
    print("Drawing a circle.");
  }
}

void main() {
  var circle = Circle();
  circle.draw(); // Drawing a circle.
}


Golang (эмулируем абстракцию через интерфейсы)

package main

import "fmt"

type Shape interface {
    Draw()
}

type Circle struct{}

func (c Circle) Draw() {
    fmt.Println("Drawing a circle.")
}

func main() {
    var shape Shape = Circle{}
    shape.Draw() // Drawing a circle.
}


Node.js

class AbstractShape {
    draw() {
        throw new Error("Abstract method!");
    }
}

class Circle extends AbstractShape {
    draw() {
        console.log("Drawing a circle.");
    }
}

const circle = new Circle();
circle.draw(); // Drawing a circle.


5. Интерфейсы

Интерфейсы определяют контракт, который могут реализовывать классы. Они помогают в создании полиморфизма.

C++

#include 
using namespace std;

class Drawable {
public:
    virtual void Draw() = 0; // Чисто виртуальный метод
};

class Circle : public Drawable {
public:
    void Draw() override {
        cout &lt;&lt; "Drawing a circle." &lt;&lt; endl;
    }
};

int main() {
    Circle c;
    c.Draw(); // Drawing a circle.
    return 0;
}


C#

using System;

interface IDrawable {
    void Draw(); // Интерфейсный метод
}

class Circle : IDrawable {
    public void Draw() {
        Console.WriteLine("Drawing a circle.");
    }
}

class Program {
    static void Main() {
        Circle circle = new Circle();
        circle.Draw(); // Drawing a circle.
    }
}


Java

interface Drawable {
    void draw(); // Интерфейсный метод
}

class Circle implements Drawable {
    public void draw() {
        System.out.println("Drawing a circle.");
    }
}

public class Main {
    public static void main(String[] args) {
        Circle circle = new Circle();
        circle.draw(); // Drawing a circle.
    }
}


JavaScript

class Circle {
    draw() {
        console.log("Drawing a circle.");
    }
}

const drawShape = (shape) =&gt; {
    if (shape.draw) {
        shape.draw();
    } else {
        throw new Error("Object does not implement draw method.");
    }
};

const circle = new Circle();
drawShape(circle); // Drawing a circle.


Python

from abc import ABC, abstractmethod

class Drawable(ABC):
    @abstractmethod
    def draw(self):
        pass

class Circle(Drawable):
    def draw(self):
        print("Drawing a circle.")

circle = Circle()
circle.draw()  # Drawing a circle.


Ruby

module Drawable
  def draw
    raise NotImplementedError, "This is an abstract method."
  end
end

class Circle
  include Drawable

  def draw
    puts "Drawing a circle."
  end
end

circle = Circle.new
circle.draw  # Drawing a circle.


Dart

abstract class Drawable {
  void draw(); // Интерфейсный метод
}

class Circle implements Drawable {
  @override
  void draw() {
    print("Drawing a circle.");
  }
}

void main() {
  var circle = Circle();
  circle.draw(); // Drawing a circle.
}


Golang

package main

import "fmt"

type Drawable interface {
    Draw()
}

type Circle struct{}

func (c Circle) Draw() {
    fmt.Println("Drawing a circle.")
}

func main() {
    var shape Drawable = Circle{}
    shape.Draw() // Drawing a circle.
}


Node.js

class Circle {
    draw() {
        console.log("Drawing a circle.");
    }
}

const drawShape = (shape) =&gt; {
    shape.draw();
};

const circle = new Circle();
drawShape(circle); // Drawing a circle.


Объектно-Ориентированное Программирование предоставляет мощные инструменты для создания сложных систем. Высокоуровневые концепции, такие как инкапсуляция, наследование, полиморфизм и абстракция, делают код более понятным и легче поддерживаемым. Мы рассмотрели основные концепции ООП и показали, как их реализовать на различных языках программирования.

Итак еще раз вернемся к основе для лучшего закрепления данного материала, а именно к определению классов в популярных языках программирования

Примеры кода объявления классов в разных языках

Пример 1: Python

# Определяем класс "Животное"
class Animal:
    # Конструктор класса, который вызывается при создании объекта
    def __init__(self, name):
        self.name = name  # Инициализируем имя животного

    # Метод для издания звука
    def speak(self):
        return "Голос животного"

# Создаем объект класса "Животное"
my_pet = Animal("Барсик")
print(f"{my_pet.name} говорит: {my_pet.speak()}")  # Выводим имя и звук животного


Пояснения:

В Python классы создаются с помощью ключевого слова class.

Конструктор __init__ используется для инициализации объекта.

Методы класса могут обращаться к атрибутам объекта через self.

Пример 2: Java

// Определяем класс "Животное"
class Animal {
    // Поле для имени животного
    private String name;

    // Конструктор класса, который вызывается при создании объекта
    public Animal(String name) {
        this.name = name; // Инициализируем имя животного
    }

    // Метод для издания звука
    public String speak() {
        return "Голос животного";
    }
}

// Главный класс для запуска программы
public class Main {
    public static void main(String[] args) {
        // Создаем объект класса "Животное"
        Animal myPet = new Animal("Барсик");
        System.out.println(myPet.name + " говорит: " + myPet.speak()); // Выводим имя и звук животного
    }
}


Пояснения:

В Java классы объявляются с модификаторами доступа, такими как public и private.

Конструкторы и методы объявляются с указанием типа возвращаемого значения.

Объект создается с использованием ключевого слова new, а доступ к его полям и методам осуществляется через точку.

Пример 3: C++

#include 
using namespace std;

// Определяем класс "Животное"
class Animal {
private:
    string name; // Поле для имени животного

public:
    // Конструктор класса, который вызывается при создании объекта
    Animal(string name) {
        this-&gt;name = name; // Инициализируем имя животного
    }

    // Метод для издания звука
    string speak() {
        return "Голос животного";
    }

    // Метод для получения имени животного
    string getName() {
        return name;
    }
};

// Главная функция
int main() {
    // Создаем объект класса "Животное"
    Animal myPet("Барсик");
    cout &lt;&lt; myPet.getName() &lt;&lt; " говорит: " &lt;&lt; myPet.speak() &lt;&lt; endl; // Выводим имя и звук животного
    return 0;
}


Пояснения:

В C++ используются директивы #include для подключения библиотек, таких как iostream для ввода-вывода.

Конструкторы в C++ могут использовать this для доступа к полям объекта.

Метод getName демонстрирует принцип инкапсуляции, так как доступ к полю name осуществляется через метод.

Общий вывод и сравнение по языкам программирования

Объектно-ориентированное программирование (ООП) основывается на четырех основных принципах: инкапсуляция, наследование, полиморфизм и абстракция. Мы Рассмотрели, как эти принципы реализованы в таких популярных языках, как C++, C#, Java, JavaScript, Python, Ruby, Dart, Golang и Node.js на примере кодов, предоставленных выше. Итак подведем итоги по языкам.

1. Инкапсуляция

C++: Поддерживает инкапсуляцию через использование модификаторов доступа (public, protected, private), что позволяет скрывать внутренние детали классов.

C#: Также предоставляет модификаторы доступа, а дополнительно поддерживает свойства, что делает работу с инкапсуляцией более удобной.

Java: Имеет аналогичные механизмы для инкапсуляции, включая модификаторы доступа и возможность создания методов доступа (getter/setter).

JavaScript: Инкапсуляция осуществляется с помощью замыканий и ES6 классов. Однако есть обходные пути для доступа к закрытым данным.

Python: Использует соглашения о наименовании (например, начальное подчеркивание) для инкапсуляции, но не имеет строгих модификаторов доступа.

Ruby: Предоставляет три уровня доступа (public, protected, private) и имеет синтаксис, поддерживающий инкапсуляцию.

Dart: Поддерживает инкапсуляцию через модификаторы доступа (например, private для обеспечения закрытых свойств), также применяет пространственные имена.

Golang: Использует экспортируемые имена (с большой буквы) и неэкспортируемые имена (с маленькой буквы) для управления доступом к элементам пакета.

Node.js: Инкапсуляция возможно через замыкания и модули. Однако явная поддержка модификаторов доступа отсутствует.

2. Наследование

C++: Поддерживает множественное наследование, что позволяет создавать более сложные иерархии.

C#: Не поддерживает множественное наследование, но позволяет реализовывать интерфейсы, что обеспечивает гибкость.

Java: Также не поддерживает множественное наследование классов, но работает с интерфейсами, позволяя реализовывать полиморфизм.

JavaScript: Использует прототипное наследование, что отличается от классического подхода, но гибко взаимодействует с объектами.

Python: Поддерживает множественное наследование, предоставляя мощные механизмы для изменения поведения классов.

Ruby: Имеет поддержку множественного наследования через механизмы миксинов, что позволяет включать функции из разных классов.

Dart: Поддерживает однонаследование с возможностью реализации нескольких интерфейсов.

Golang: Не поддерживает классическое наследование, но реализует композицию через встраивание структур.

Node.js: Использует прототипное наследование, как и JavaScript, поскольку основан на нем.

3. Полиморфизм

C++: Полиморфизм обеспечивается с помощью виртуальных функций и перегрузки операторов.

C#: Реализует полиморфизм через виртуальные и абстрактные методы, а также интерфейсы.

Java: Поддерживает полиморфизм через переопределение методов и использование интерфейсов.

JavaScript: Полиморфизм достигается через динамическое связывание методов, но неявно и без строгих типов.

Python: Поддерживает полиморфизм через динамическое связывание и переопределение методов.

Ruby: Поддерживает полиморфизм через динамическое типоведение и открытые классы.

Dart: Реализует статический полиморфизм через перегрузку и динамический полиморфизм через интерфейсы.

Golang: Поддерживает полиморфизм через интерфейсы, предоставляя возможность реализовать лучшую адаптацию.

Node.js: Полиморфизм достигается через динамическое создание объектов и прототипное наследование.

4. Абстракция

C++: Позволяет создавать абстрактные классы и интерфейсы для определения интерфейсов и скрытия деталей реализации.

C#: Поддерживает абстракцию через абстрактные классы и интерфейсы, что обеспечивает четкую структуру.

Java: Предлагает возможность создавать абстрактные классы и интерфейсы для абстракции.

JavaScript: Создание абстракций возможно, но требует дополнительных усилий из-за прототипной модели.

Python: Реализует абстракцию через абстрактные базовые классы (ABC).

Ruby: Поддерживает абстракцию с помощью модулей и классических абстрактных классов.

Dart: Позволяет реализовывать абстракцию через абстрактные классы и интерфейсы.

Golang: Поддерживает абстракцию с помощью интерфейсов, но не имеет явных абстрактных классов.

Node.js: Как и JavaScript, использует абстракции, но требует больше усилий.

Вывод

Каждый язык программирования подходит к реализации принципов ООП по-своему, в зависимости от своей философии и структуры.

C++, Java, C#, Python и Ruby предлагают классический подход к ООП с использованием строгих модификаторов доступа, наследования и полиморфизма.

JavaScript и Node.js используют более гибкий, прототипный подход, что делает их более динамичными, но также менее строгими.

Go фокусируется на композиции и интерфейсах, избегая классического наследования, что делает его более простым и эффективным для определенных задач.

Dart сочетает элементы из разных языков, предлагая мощные механизмы для реализации ООП.

Таким образом, выбор языка зависит от требований проекта и личных предпочтений разработчика.
